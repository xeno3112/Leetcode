Iterative Approach:- (Using stack and inorder traversal. This approach can also be called controlled recursion)
TIme: O(n), Space: O(h)

class BSTIterator {
    stack<TreeNode*> s;
public:
    BSTIterator(TreeNode* root) {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        while(root){
            s.push(root);
            root = root->left;
        }
    }
    
    /** @return the next smallest number */
    int next() {
        auto temp = s.top();
        int x = temp->val;
        s.pop();
        temp = temp->right;
        while(temp){
            s.push(temp);
            temp = temp->left;
        }
        return x;
    }
    
    /** @return whether we have a next smallest number */
    bool hasNext() {
        return !s.empty();
    }
};
