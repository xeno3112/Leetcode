Top-Down Approach:-
Time: O(n*m), Space: O(n*m)

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.size();
        int m = text2.size();
        vector<vector<int>> dp(n+1, vector<int>(m+1));
        for(int i = 1 ; i <= n ; i++){
            for(int j = 1 ; j <= m ; j++){
                if(text1[i-1] == text2[j-1])
                    dp[i][j] = dp[i-1][j-1] + 1;
                else
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
            }
        }
        
        return dp[n][m];
    }
};
---------------------------------------------------------------------------------------------------------------------------------------------------------------
Memoization Approach:-
Time: O(n*m), Space: O(n*m)

class Solution {
public:
    int lcs(string& s1, string &s2, int n, int m, vector<vector<int>> &dp){
        if(dp[n][m] == -1){
            if(n == 0 or m == 0)
                dp[n][m] = 0;
            else if(s1[n-1] == s2[m-1])
                dp[n][m] = lcs(s1, s2, n-1, m-1, dp) + 1;
            else
                dp[n][m] = max(lcs(s1, s2, n-1, m, dp), lcs(s1, s2, n, m-1, dp));
        }
        return dp[n][m];
    }
    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.size();
        int m = text2.size();
        vector<vector<int>> dp(n+1, vector<int>(m+1, -1));
        lcs(text1, text2, n, m, dp);
        return dp[n][m];
    }
};
