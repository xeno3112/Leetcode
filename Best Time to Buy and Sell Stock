Solution 1:(Kadane's Algorithm) Time: O(n), Space: O(1)

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int maxCur = 0, maxSoFar = 0;
        for(int i = 1 ; i < prices.size() ; i++) {
            maxCur = max(0, maxCur + prices[i] - prices[i-1]);
            maxSoFar = max(maxCur, maxSoFar);
        }
        return maxSoFar;
    }
};
---------------------------------------------------------------------------------------------------------------
Solution 2: Time: O(n), Space: O(1)

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int minPrice = INT_MAX, profit = 0;
        for(int i = 0 ; i < prices.size() ; i++) {
            if (prices[i] < minPrice)
                minPrice = prices[i];
            else if (prices[i] - minPrice > profit)
                profit = prices[i] - minPrice;
        }
        return profit;
    }
};
