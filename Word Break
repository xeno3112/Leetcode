Time: O(n*m), Space: O(n+m)

class Solution {
public:
    bool wordBreak(string str, vector<string>& wordDict) {
        int n = str.size();
        if(wordDict.size() == 0)
            return false;
        unordered_set<string> s;
        for(int i = 0 ; i < wordDict.size() ; i++)
            s.insert(wordDict[i]);
        vector<bool> dp(str.size()+1, false);
        dp[0] = true;
        
        for(int i = 1 ; i <= str.size() ; i++){
            for(int j = i - 1 ; j >= 0 ; j--){
                if(dp[j]){
                    string word = str.substr(j, i-j);
                    if(s.find(word)!= s.end()){
                        dp[i]=true;
                        break; //next i
                    }
                }
            }
        }
        
        return dp[str.size()];
    }
};
