Time: O(n), Space: O(1)
Iterative approach:

class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        if(head == NULL or head->next == NULL or (m == 1 and n == 1))
            return head;
        int counter = 1;
        ListNode* prev = NULL, *curr = head, *first, *tempfirst;
        while(curr and counter < n){
            tempfirst = curr;
            bool flag = false;
            if(counter == m){
                while(curr and counter <= n){
                    ListNode* temp = curr->next;
                    curr->next = prev;
                    prev = curr;
                    curr = temp;
                    counter++;
                }
                tempfirst->next = curr;
                if(m == 1)
                    return prev;
                first->next = prev;
                flag = true;
            }
            if(flag)
                break;
            first = curr;
            curr = curr->next;
            counter++;
        }
        
        return head;
    }
};
