Recursive Approach:-
Time: O(n), Space: O(h)

class Solution {
    vector<int> res;
public:
    void post(TreeNode* root){
        if(!root)
            return;
        post(root->left);
        post(root->right);
        res.push_back(root->val);
    }
    vector<int> postorderTraversal(TreeNode* root) {
        post(root);
        return res;
    }
};
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
Iterative Approach:- 
Time: O(n), Space: O(n)

class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        if(!root)
            return {};
        vector<int> res;
        stack<TreeNode*> s1, s2;
        TreeNode* curr = root;
        s1.push(curr);
        while(!s1.empty()){
            curr = s1.top();
            s2.push(curr);
            s1.pop();
            if(curr->left)
                s1.push(curr->left);
            if(curr->right)
                s1.push(curr->right);
        }
        while(!s2.empty()){
            res.push_back(s2.top()->val);
            s2.pop();
        }
        return res;
    }
};
