Solution 1: Time: O(nlogn), space: O(n)

class Solution {
public:
    int global = 0;
    void merge(vector<int>& A, int l, int m, int r){
        int t[r-l+1];
        int i = l, j = m+1, k = 0;
        while(i <= m and j <= r){
            if(A[i] > A[j]){
                global += m-i+1;
                t[k++] = A[j++];
            }
            else
                t[k++] = A[i++];
        }
        while(i <= m)
            t[k++] = A[i++];
        while(j <= r)
            t[k++] = A[j++];
        for(int i = 0 ; i <= r-l ; i++)
            A[i+l] = t[i];
    }
    void mergeSort(vector<int>& A, int i, int j){
        if(i < j){
            int mid = (i+j)/2;
            mergeSort(A, i, mid);
            mergeSort(A, mid+1, j);
            merge(A, i, mid, j);
        }
    }
    bool isIdealPermutation(vector<int>& A) {
        int n = A.size();
        if(n == 0 or n == 1)
            return true;
        int local = 0;
        for(int i = 0 ; i < n-1 ; i++)
            if(A[i] > A[i+1])
                local++;
        mergeSort(A, 0, n-1);
        return (local == global);
    }
};
  
Solution 2: Time: O(n), space: O(1)

for (int i = 0; i < A.size(); ++i)
       if (abs(A[i] - i) > 1) return false;
return true;
