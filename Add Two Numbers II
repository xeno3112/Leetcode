Time: O(n), Space: O(1)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rev(ListNode* head){
        if(head == NULL or head->next == NULL)
            return head;
        ListNode* newHead = rev(head->next);
        head->next->next = head;
        head->next = NULL;
        return newHead;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(!l1)
            return l2;
        if(!l2)
            return l1;
        l1 = rev(l1);
        l2 = rev(l2);
        ListNode* prev = NULL, *curr1 = l1, *curr2 = l2;
        int carry = 0;
        while(curr1 and curr2){
            int sum = carry + curr1->val + curr2->val;
            if(sum > 9)
                carry = 1;
            else
                carry = 0;
            curr1->val = sum % 10;
            prev = curr1;
            curr1 = curr1->next;
            curr2 = curr2->next;
        }
        if(curr2){
            prev->next = curr2;
            while(curr2 and carry == 1){
                int sum = carry + curr2->val;
                if(sum > 9)
                    carry = 1;
                else
                    carry = 0;
                curr2->val = sum % 10;
                prev = curr2;
                curr2 = curr2->next;
            }
        }
        while(curr1 and carry == 1){
            int sum = carry + curr1->val;
            if(sum > 9)
                carry = 1;
            else
                carry = 0;
            curr1->val = sum % 10;
            prev = curr1;
            curr1 = curr1->next;
        }
        if(carry == 1){
            ListNode* temp = new ListNode(1);
            prev->next = temp;
        }
        l1 = rev(l1);
        return l1;
    }
};
