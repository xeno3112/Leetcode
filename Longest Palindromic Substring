Time: O(n^2), Space: O(1)

class Solution {
public:
    int util(string s, int l, int r){
        while(l >= 0 and r < s.size() and s[l] == s[r]){
            l--;
            r++;
        }
        return r-l-1;
    }
    string longestPalindrome(string s) {
        int n = s.length();
        if(n == 0)
            return "";
        
        int start = 0, end = 0;
        for(int i = 0 ; i < n ; i++){
            int len1 = util(s, i, i);
            int len2 = util(s, i, i+1);
            int len = max(len1, len2);
            if(end-start < len){
                start = i - (len-1)/2;
                end = i + len/2;
            }
        }
        return s.substr(start, end-start+1);
    }
};
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
Dynamic Programming:-

Time: O(n^2), Space: O(n^2)

class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.length();
        if(n == 0)
            return "";
        
        vector<vector<bool> > dp(n, vector<bool>(n, false));
        for(int i = 0 ; i < n ; i++)
            dp[i][i] = true;

        int start = 0, len = 1;
        for(int i = 0 ; i < n-1 ; i++){
            if(s[i] == s[i+1]){
                dp[i][i+1] = true;
                start = i;
                len = 2;
            }
        }
        for(int k = 3 ; k <= n ; k++){
            for(int i = 0 ; i <= n-k ; i++){
                int j = i + k - 1;
                if(s[i] == s[j] && dp[i+1][j-1]){
                    dp[i][j] = true;
                    start = i;
                    len = k;
                }
            }
        }
    return s.substr(start, len);
    }
};
