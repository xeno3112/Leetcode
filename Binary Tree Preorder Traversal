Recusrsive Approach:-
Time: O(n), Space: O(h)

class Solution {
    vector<int> res;
public:
    void pre(TreeNode* root){
        if(!root)
            return;
        pre(root->left);
        pre(root->right);
        res.push_back(root->val);
    }
    vector<int> preorderTraversal(TreeNode* root) {
        in(root);
        return res;
    }
};
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Time: O(n), Space: O(h)

class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        if(!root)
            return {};
        vector<int> res;
        stack<TreeNode*> s;
        TreeNode* curr = root;
        while(curr or !s.empty()){
            while(curr){
                s.push(curr);
                res.push_back(curr->val);
                curr = curr->left;
            }
            curr = s.top();
            s.pop();
            
            curr = curr->right;
        }
        return res;
    }
};
