Time: O(n^3), Space: O(n)


class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n = nums.size();
        if(n < 4)
            return {};
        vector<vector<int>> res;
        set<vector<int>> s;
        sort(nums.begin(), nums.end());
        for(int i = 0 ; i < n-3 ; i++){
            for(int j = i+1 ; j < n-2 ; j++){
                int k = j+1, l = n-1;
                while(k < l){
                    if(nums[i]+nums[j]+nums[k]+nums[l] == target){
                        vector<int> temp = {nums[i], nums[j], nums[k], nums[l]};
                        if(s.find(temp) == s.end()){
                            s.insert(temp);
                            res.push_back(temp);
                        }
                        k++;
                        l--;
                    }
                    else if(nums[i]+nums[j]+nums[k]+nums[l] > target)
                        l--;
                    else
                        k++;
                }
            }
        }
        return res;
    }
};

