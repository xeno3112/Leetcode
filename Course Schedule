Time: O(n), Space: O(n)

class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        if(prerequisites.empty() or prerequisites[0].empty())
            return true;
        int n = prerequisites.size();
        vector<int> adj[numCourses], in(numCourses), topo;
        for(int i = 0 ; i < n ; i++){
            adj[prerequisites[i][1]].push_back(prerequisites[i][0]);
            in[prerequisites[i][0]]++;
        }
        queue<int> q;
        for(int i = 0 ; i < numCourses ; i++)
            if(in[i] == 0)
                q.push(i);
        while(!q.empty()){
            int temp = q.front();
            q.pop();
            topo.push_back(temp);
            for(auto x : adj[temp]){
                in[x]--;
                if(in[x] == 0)
                    q.push(x);
            }
        }
        return (topo.size() == numCourses);
    }
};
