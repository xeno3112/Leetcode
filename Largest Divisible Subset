Time: O(n^2), Space: O(n)

class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& arr) {
        int n = arr.size();
        if(n == 0)
            return {};
        if(n == 1)
            return arr;
        sort(arr.begin(), arr.end());
        vector<int> res;
        vector <int> divCount(n, 1); 
        vector <int> prev(n, -1); 
        int max_ind = 0; 
        for (int i = 1 ; i < n ; i++){ 
            for (int j = 0 ; j < i ; j++){ 
                if (arr[i] % arr[j] == 0){ 
                    if (divCount[i] < divCount[j] + 1){ 
                        divCount[i] = divCount[j]+1; 
                        prev[i] = j; 
                    } 
                } 
            } 
            if (divCount[max_ind] < divCount[i]) 
                max_ind = i; 
        } 
        int k = max_ind; 
        while (k >= 0){ 
            res.push_back(arr[k]); 
            k = prev[k]; 
        } 
        reverse(res.begin(), res.end());
        return res;
    }
    
};
