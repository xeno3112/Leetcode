Time: O(n), Space: O(n)

class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        if(n == 0)
            return 0;
        stack<int> s;
        int res = 0;
        for(int i = 0 ; i < n ; i++){
            while(!s.empty() and heights[s.top()] >= heights[i]){
                int temp = s.top();
                s.pop();
                int curr = heights[temp]*(s.empty() ? i : (i - s.top() - 1));
                res = max(curr, res);
            }
            s.push(i);
        }
        while(!s.empty()){
            int temp = s.top();
            s.pop();
            int curr = heights[temp]*(s.empty() ? n : (n - s.top() - 1));
            res = max(curr, res);
        }
        return res;
    }
};
