Time: O(n^2), Space: O(n^2)

class Solution {
public:
    
    bool solve(vector<int>& nums, vector<vector<bool>>& dp, int sum){
        int n = nums.size();
        for(int i = 1 ; i <= n ; i++){
            for(int j = 1 ; j <= sum ; j++){
                dp[i][j] = dp[i-1][j];
                if(j >= nums[i-1])
                    dp[i][j] = dp[i-1][j-nums[i-1]] or dp[i][j];
            }
        }
        return dp[n][sum];
    }
    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        if(n <= 1)
            return false;
        int sum = 0;
        for(int i = 0 ; i < n ; i++)
            sum += nums[i];
        if(sum % 2 != 0)
            return false;
        sum /= 2;
        vector<vector<bool>> dp(n+1, vector<bool>(sum+1));
        for(int i = 0 ; i <= n ; i++)
            dp[i][0] = true;
        return solve(nums, dp, sum);
    }
};
