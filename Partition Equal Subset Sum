Time: O(n*sum), Space: O(n*sum)

class Solution {
public:
    bool subset(vector<int>& nums, int sum, int n){
        vector<vector<bool>> dp(n+1, vector<bool>(sum + 1));
        for(int i = 0 ; i <= n ; i++)
            dp[i][0] = true;
        for(int i = 1 ; i <= n ; i++){
            for(int j = 1 ; j <= sum ; j++){
                if(j < nums[i-1])
                    dp[i][j] = dp[i-1][j];
                else
                    dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]];
            }
        }
        return dp[n][sum];
    }
    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int sum = 0;
        for(int i = 0 ; i < n ; i++)
            sum += nums[i];
        if(sum % 2 != 0)
            return false;
        return subset(nums, sum/2, nums.size());
    }
};
